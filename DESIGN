TODO
- threads in model.c
- test creating random ions and accelerate them towards the grid
- sdl init
- sdl display layout
- sdl chamber
- sdl graphs

DONE

-----------------------

DATA
- array of particles
- particles indexed by cu mm location, needs a list or an array at each location
- radial stats

INTERACTIONS
- ionization
- recombination
- collision
- movement
  . if goes outside chamber then reset speed to ambient temperature, and
    reset direction to within chamber, and reset position to within chamber

PARAMETERS
- chamber radius   
- grid radius
- grid voltage
- grid current
- pressure, can this be changed dynamically
- delta_t  (warn if becomes too big to process collisions)

CONSTANTS
- number of particles in the simulation
- location box size  (cu mm)

GRAPHS - X AXIS IS RADIUS
- number density of D and D ions
- temperature
- ionization and recombination rate

CHAMBER VIEW
- cross section xl to xh, yl to yh, z-deltaz/2 to z+deltaz/2
- ability to set deltaz, and to zoom in and out on an x,y

PROGRAMMING
- use integer math
  . x,y,z:  nanometers
  . velocity:  nanometers/sec
  . time:  nanoseconds
- use all available cores for particle sim
- main thread is for sdl display and control
- files
  . common.h
  . main.c
  . ionization.c
  . particles.c
  . readme
- locking
  . each thread will grab a location to process all particles at that
    location, and while doing that will own the mutex for that location
  . if a particle has moved into a location it will have already have been
    processed for this T, and thus will not be reporcessed
  . when moving a particle to a new location, will need to acquire the lock
    for that location

ASSUMPTIONS
- only D, no D2

xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxx  LATER  xxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx


#define FILE_HDR_MAGIC    1234567
#define FILE_HDR_VERSION  1

typedef struct {
    int64_t magic;
    int64_t version;
    int64_t reserved[6];
} file_hdr_t;

int32_t model_init_from_file()
{
    int32_t fd = -1;
    int32_t ret = -1;
    bool was_running;

    // stop the model
    was_running = model_stop();

    // open the file
    fd = open(xxx, O_RDONLY);
    if (fd == -1) {
        ERROR
        goto err;

    // read file header and verify
    ret = read(fd, &hdr, sizeof(hdr));
    if (ret != sizeof(hdr)) {
        ERROR
        goto err;
    }

    // read ....................

    // success
    ret = 0;
    goto cleanup;

    // error 
err:
    ret = -1;
    goto cleanup;

    // cleanup and return
cleanup:
    if (fd != -1) {
        close(fd);
    }
    if (was_running) {
        model_start();
    }
    return ret;
}

int32_t model_write_file(void)
{
    bool was_running;

    // stop the model
    was_running = model_stop();

    // write the file

    // if the model was running then start the model
    if (was_running) {
        model_start();
    }
}


int32_t model_terminate()
{
    // stop the model

    // XXX what else?
}


model_change_param(enum param_select, int64_t param_value)
{
    // if the model is running then stop the model

    // change the param
    switch (param_select) {
    case PARM_VOLTAGE:
        param.voltage = param_value;
        break;
    ...
    }

    // if the model was running then start the model
}
#endif

xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxx  INTEGER QUARE ROOT  xxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx

http://www.codecodex.com/wiki/Calculate_an_integer_square_root
http://www.codecodex.com/wiki/Calculate_an_integer_square_root
   ^^^^ TRY THESE


------------------------

https://www.akalin.com/computing-isqrt

// isqrt returns the greatest number x such that x^2 <= n. The type of
// n must behave like BigInteger (e.g.,
// https://github.com/jasondavies/jsbn ), and n must be non-negative.
//
//
// Example (open up the JS console on this page and type):
//
//   isqrt(new BigInteger("64")).toString()
function isqrt(n) {
  var s = n.signum();
  if (s < 0) {
    throw new Error('negative radicand');
  }
  if (s == 0) {
    return n;
  }

  // x = 2^ceil(Bits(n)/2)
  var x = n.constructor.ONE.shiftLeft(Math.ceil(n.bitLength()/2));
  while (true) {
    // y = floor((x + floor(n/x))/2)
    var y = x.add(n.divide(x)).shiftRight(1);
    if (y.compareTo(x) >= 0) {
      return x;
    }
    x = y;
  }
}

https://stackoverflow.com/questions/53161/find-the-highest-order-bit-in-c
int highest_order_bit(int x)
{
    static const int msb_lut[256] =
        {
            0, 0, 1, 1, 2, 2, 2, 2, // 0000_0000 - 0000_0111
            3, 3, 3, 3, 3, 3, 3, 3, // 0000_1000 - 0000_1111
            4, 4, 4, 4, 4, 4, 4, 4, // 0001_0000 - 0001_0111
            4, 4, 4, 4, 4, 4, 4, 4, // 0001_1000 - 0001_1111
            5, 5, 5, 5, 5, 5, 5, 5, // 0010_0000 - 0010_0111
            5, 5, 5, 5, 5, 5, 5, 5, // 0010_1000 - 0010_1111
            5, 5, 5, 5, 5, 5, 5, 5, // 0011_0000 - 0011_0111
            5, 5, 5, 5, 5, 5, 5, 5, // 0011_1000 - 0011_1111

            6, 6, 6, 6, 6, 6, 6, 6, // 0100_0000 - 0100_0111
            6, 6, 6, 6, 6, 6, 6, 6, // 0100_1000 - 0100_1111
            6, 6, 6, 6, 6, 6, 6, 6, // 0101_0000 - 0101_0111
            6, 6, 6, 6, 6, 6, 6, 6, // 0101_1000 - 0101_1111
            6, 6, 6, 6, 6, 6, 6, 6, // 0110_0000 - 0110_0111
            6, 6, 6, 6, 6, 6, 6, 6, // 0110_1000 - 0110_1111
            6, 6, 6, 6, 6, 6, 6, 6, // 0111_0000 - 0111_0111
            6, 6, 6, 6, 6, 6, 6, 6, // 0111_1000 - 0111_1111

            7, 7, 7, 7, 7, 7, 7, 7, // 1000_0000 - 1000_0111
            7, 7, 7, 7, 7, 7, 7, 7, // 1000_1000 - 1000_1111
            7, 7, 7, 7, 7, 7, 7, 7, // 1001_0000 - 1001_0111
            7, 7, 7, 7, 7, 7, 7, 7, // 1001_1000 - 1001_1111
            7, 7, 7, 7, 7, 7, 7, 7, // 1010_0000 - 1010_0111
            7, 7, 7, 7, 7, 7, 7, 7, // 1010_1000 - 1010_1111
            7, 7, 7, 7, 7, 7, 7, 7, // 1011_0000 - 1011_0111
            7, 7, 7, 7, 7, 7, 7, 7, // 1011_1000 - 1011_1111

            7, 7, 7, 7, 7, 7, 7, 7, // 1100_0000 - 1100_0111
            7, 7, 7, 7, 7, 7, 7, 7, // 1100_1000 - 1100_1111
            7, 7, 7, 7, 7, 7, 7, 7, // 1101_0000 - 1101_0111
            7, 7, 7, 7, 7, 7, 7, 7, // 1101_1000 - 1101_1111
            7, 7, 7, 7, 7, 7, 7, 7, // 1110_0000 - 1110_0111
            7, 7, 7, 7, 7, 7, 7, 7, // 1110_1000 - 1110_1111
            7, 7, 7, 7, 7, 7, 7, 7, // 1111_0000 - 1111_0111
            7, 7, 7, 7, 7, 7, 7, 7, // 1111_1000 - 1111_1111
        };

    int byte;
    int byte_cnt;

    for (byte_cnt = 3; byte_cnt >= 0; byte_cnt--)
    {
        byte = (x >> (byte_cnt * 8)) & 0xff;
        if (byte != 0)
        {
            return msb_lut[byte] + (byte_cnt * 8);
        }
    }

    return -1;
}


Î»x.letrec sqrt(x) = 
  if x = 0 then 0
  else let r2 := sqrt (x - 1) in
       let r3 := r2 + 1 in
         if (x) < (r3 * r3) then r2
         else r3 in
  sqrt(x)



function integerSqrt(n):
    if n < 0:
        error "integerSqrt works for only nonnegative inputs"
    else if n < 2:
        return n
    else:
        # Recursive call:
        smallCandidate = integerSqrt(n >> 2) << 1
        largeCandidate = smallCandidate + 1
        if largeCandidate*largeCandidate > n:
            return smallCandidate
        else:
            return largeCandidate



uint32_t gapsqrt64(uint64_t a) {
        uint64_t rem = 0, root = 0;

        for (int i = 64 / 2; i > 0; i--) {
                root <<= 1;
                rem = (rem << 2) | (a >> (64 - 2));
                a <<= 2;
                if (root < rem) {
                        rem -= root | 1;
                        root += 2;
                }
        }
        return root >> 1;
}



/* Integer square root by Halleck's method, with Legalize's speedup */
long isqrt (x) long x;{
  long   squaredbit, remainder, root;

   if (x<1) return 0;
  
   /* Load the binary constant 01 00 00 ... 00, where the number
    * of zero bits to the right of the single one bit
    * is even, and the one bit is as far left as is consistant
    * with that condition.)
    */
   squaredbit  = (long) ((((unsigned long) ~0L) >> 1) & 
                        ~(((unsigned long) ~0L) >> 2));
   /* This portable load replaces the loop that used to be 
    * here, and was donated by  legalize@xmission.com 
    */

   /* Form bits of the answer. */
   remainder = x;  root = 0;
   while (squaredbit > 0) {
     if (remainder >= (squaredbit | root)) {
         remainder -= (squaredbit | root);
         root >>= 1; root |= squaredbit;
     } else {
         root >>= 1;
     }
     squaredbit >>= 2; 
   }

   return root;
}

xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxx  RANDOM NUMBER TEST  xxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx


#include <stdio.h>
#include <stdint.h>
#include <stdlib.h>

inline int32_t random_range(int32_t min, int32_t max)
{
    int64_t extent = (int64_t)max - min + 1L;
    return random() * extent / (RAND_MAX+1L) + min;
}

int main(int argc, char **argv)
{
    int32_t min, max;

    printf("%d %d\n", 0x80000000, 0x7fffffff);

    if (argc != 3) {
        printf("min and max expected\n");
        exit(1);
    }
    if (sscanf(argv[1], "%d", &min) != 1) {
        printf("min invalid\n");
        exit(1);
    }
    if (sscanf(argv[2], "%d", &max) != 1) {
        printf("max invalid\n");
        exit(1);
    }

    printf("min=%d max=%d\n", min, max);
    while (1) {
        printf("%d\n", random_range(min,max));
    }
}
