// kinetic diameter;
// https://en.wikipedia.org/wiki/Kinetic_diameter
// 
//   d^2 = 1 / (pi * l * n)
//
//     d = kinetic diameter
//     l = mean free path
//     n = number density of particles


#include <stdio.h>
#include <stdint.h>
#include <stdbool.h>
#include <stdlib.h>
#include <stdarg.h>
#include <unistd.h>

#include <assert.h>
#include <errno.h>
#include <string.h>
#include <math.h>
#include <sys/queue.h>

#include "util_misc.h"

//
// defines
//

#define NUM_SECTION               (10)
#define NUM_SIM_PARTICLE          (1000000)
#define CHAMBER_LENGTH            (10.0)         // m
#define CHAMBER_CROSS_SECTION     (.001 * .001)  // m^2
#define CHAMBER_VOLUME            (CHAMBER_LENGTH * CHAMBER_CROSS_SECTION)
#define SECTION_VOLUME            (CHAMBER_VOLUME / NUM_SECTION)
#define SECTION_LENGTH            (CHAMBER_LENGTH / NUM_SECTION)
#define NUM_REAL_PARTICLE         (5e20 * CHAMBER_VOLUME)

#define SECT_NUM(sp)              ((sp)->position / SECTION_LENGTH)

#define CHAMBER_LEFT_END_TEMP     200
#define CHAMBER_RIGHT_END_TEMP    400  
#define GUESS_TEMP                300

#define SECTION_START(num)        ((num) * SECTION_LENGTH)

//
// typedefs
//

typedef struct {
    struct {
        double number_density;  // real particles per m^3
        double temperature;     // kelvin
    } section[NUM_SECTION];
} state_t;

typedef struct {
    double position;
    double temperature;
    double velocity;
} sim_particle_t;

// 
// variables
//

state_t        state;
int32_t        num_sim_particle;
sim_particle_t sim_particle[NUM_SIM_PARTICLE];

//
// prototypes
//

void test(void);
void init_state_guess(void);
void create_particles(void);
void simulate_particles(void);
void init_state_from_particles(void);
void print_state(char * s);

// -----------------  MAIN  ----------------------------------------------------------------------------

int main(int argc, char **argv)
{
#if 1
    double number_density, d, mean_free_path;
    number_density = 4.92234e+20;  // NUM_D2_MOLECULES/CU_M
    d = 289e-12;   // meters
                   // 289 pm (picometer)  (for H2 molecule)
                   // a picometer is 1/1000 of a nanometer
    mean_free_path = 1 / (M_PI * d * d * number_density);
    printf("mean_free_path = %lf meters\n", mean_free_path);

    #define D2_AMU 4.03
    #define AMU_TO_KG(x)    ((x) * 1.66054e-27)
    #define k  1.38066e-23    // Boltzmann constant J/K
    #define TEMPERATURE_TO_VELOCITY(T) (sqrt(3 * k * (T) / AMU_TO_KG(D2_AMU)))
    printf("VELOCITY AT %d Kelvin %lg m/s\n",
        GUESS_TEMP, TEMPERATURE_TO_VELOCITY(GUESS_TEMP));

    printf("max DeltaT = %lg  secs\n",
        mean_free_path / TEMPERATURE_TO_VELOCITY(GUESS_TEMP) / 10);
    
    printf("\n");
#endif

    INFO("HELLO\n");
    test();

    return 0;
}

// -----------------  SIMULATION TEST  -----------------------------------------------------------------

void test(void)
{
    // init state
    init_state_guess();

    while (true) {
        // create representative particles for state
        create_particles();

        // simulate the representative particles for one time unit
        simulate_particles();

        // set state based on the reprsentative particles
        init_state_from_particles();
        exit(1);
    }
}

void init_state_guess(void)
{
    int32_t i;
    double section_number_density;

    section_number_density = NUM_REAL_PARTICLE / CHAMBER_VOLUME;
    for (i = 0; i < NUM_SECTION; i++) {
        state.section[i].number_density = section_number_density;  // real particles per m^3
        state.section[i].temperature    = GUESS_TEMP;              // kelvin
    }

    print_state("init_state_guess");
}

void create_particles(void)
{
    int32_t i, j, n;
    double temperature, velocity, spacing, position;

    num_sim_particle = 0;
    for (i = 0; i < NUM_SECTION; i++) {
        temperature = state.section[i].temperature;
        velocity = TEMPERATURE_TO_VELOCITY(temperature);
        n = state.section[i].number_density * SECTION_VOLUME * (NUM_SIM_PARTICLE / NUM_REAL_PARTICLE);
        spacing = SECTION_LENGTH / n;
        position = SECTION_START(i) + spacing / 2;
        for (j = 0; j < n; j++) {   
            assert(num_sim_particle < NUM_SIM_PARTICLE);
            sim_particle[num_sim_particle].position = position;
            sim_particle[num_sim_particle].temperature = temperature;
            sim_particle[num_sim_particle].velocity = ((j & 1) ? velocity : -velocity);
            position += spacing;
            num_sim_particle++;
        }
    }

    DEBUG("num_sim_particle = %d\n\n", num_sim_particle);
    assert(num_sim_particle <= NUM_SIM_PARTICLE);
    assert(num_sim_particle > NUM_SIM_PARTICLE*0.99);   
}

void simulate_particles(void)
{
    int32_t i;
    int32_t coll_cnt;

    //#define DELTA_T  (1e-7)   // 1/10 microsecond
    #define DELTA_T  (1e-6)

    coll_cnt = 0;
    for (i = 0; i < num_sim_particle; i++) {
        sim_particle_t * sp = &sim_particle[i];

#if 0
        // update position
        sp->position = sp->position + sp->velocity * DELTA_T;

        // if the particle is outside the chamber on the left then
        //   set poistion to 0
        //   set temperature to that of the left chamber wall
        //   set positive velocity based on temperature
        // endif
        if (sp->position < 0) {
            sp->position = 0;
            sp->temperature = CHAMBER_LEFT_END_TEMP;
            sp->velocity = TEMPERATURE_TO_VELOCITY(sp->temperature);
        }

        // if the particu is outside the chamber on the right then
        //   set poistion to CHAMBER_LENGTH
        //   set temperature to that of the right chamber wall
        //   set negative velocity based on temperature
        // endif
        if (sp->position >= CHAMBER_LENGTH) {
            sp->position = CHAMBER_LENGTH - 1e-9;
            sp->temperature = CHAMBER_RIGHT_END_TEMP;
            sp->velocity = -TEMPERATURE_TO_VELOCITY(sp->temperature);
        }
#endif

        // based on the probability of a collision with another particle determine
        // whether a collision occurred; if so then update velocity using conservation
        // of momentum and the velocity of the particle and the velocity of particles
        // in this section
        // https://en.wikipedia.org/wiki/Kinetic_diameter
        double d, mean_free_path, average_num_events_per_sec, average_num_events_per_interval;
        double number_density, probability_of_0_collisions_in_interval;
        int32_t sect_num;
        bool collision_occurred;

        sect_num = SECT_NUM(sp);
        assert(sect_num >= 0 && sect_num < NUM_SECTION);
        number_density = state.section[sect_num].number_density;
        d = 289e-12;   // kinetic diameter of hydrogen in meters for H2
        mean_free_path = 1. / (M_PI * d * d * number_density);
        average_num_events_per_sec  = fabs(sp->velocity) / mean_free_path;
        average_num_events_per_interval   = average_num_events_per_sec * DELTA_T;
        probability_of_0_collisions_in_interval =   exp(-average_num_events_per_interval);
        collision_occurred = ((double)random()/RAND_MAX > probability_of_0_collisions_in_interval);

        printf("sp[%d]: position=%lf velocity=%lf temp=%lf\n",
               i, sp->position, sp->velocity, sp->temperature);
        printf("  sect_num=%d  section_num_density=%lg\n",
               sect_num, number_density);
        printf("  mfp=%lf  avg_col/sec=%lf  avg_col_per_intvl=%lf\n",
               mean_free_path, average_num_events_per_sec, average_num_events_per_interval);
        printf("  probability_of_0_col_in_intvl = %lf\n",
               probability_of_0_collisions_in_interval);
        if (collision_occurred) {
            coll_cnt++;
            printf("*** COLLISION i=%d coll_cnt=%d fract=%lf ***\n",
                   i, coll_cnt, (double)coll_cnt / (i+1));
            // XXX tbd
        }
    }
}

void init_state_from_particles()
{
    int32_t i, sect_num;
    int32_t sim_particle_count[NUM_SECTION];
    double sim_particle_sum_temperature[NUM_SECTION];

    memset(sim_particle_count, 0, sizeof(sim_particle_count));
    memset(sim_particle_sum_temperature, 0, sizeof(sim_particle_sum_temperature));

    // loop over all particles to determine the 
    // - number of particles per section
    // - average temperature of particles per section
    for (i = 0; i < num_sim_particle; i++) {
        sim_particle_t * sp = &sim_particle[i];
        sect_num = SECT_NUM(sp);
        assert(sect_num >= 0 && sect_num < NUM_SECTION);
        sim_particle_count[sect_num]++;
        sim_particle_sum_temperature[sect_num] += sp->temperature;
    }

    // XXX comments
    for (i = 0; i < NUM_SECTION; i++) {
        state.section[i].number_density = sim_particle_count[i] * (NUM_REAL_PARTICLE /NUM_SIM_PARTICLE) / 
                                          SECTION_VOLUME;
        state.section[i].temperature    = sim_particle_sum_temperature[i] / sim_particle_count[i];
    }

    print_state("init_state_from_particles");
        
    // XXX may need to tweak number of particles per section to avoid rounding error
}

void print_state(char * s)
{
    int32_t i;

    printf("%s\n", s);
    for (i = 0; i < NUM_SECTION; i++) {
        printf("%s: sect %d:  num_density=%lg  temp=%lf\n", 
           __func__, i, state.section[i].number_density, state.section[i].temperature);
    }
    printf("\n");
}
